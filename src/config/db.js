const mongoose = require('mongoose');

const connectDB = async (retryCount = 0) => {
    try {
        console.log('üîÑ ƒêang k·∫øt n·ªëi ƒë·∫øn MongoDB...');
        
        // Ki·ªÉm tra MONGODB_URI
        if (!process.env.MONGODB_URI) {
            console.warn('‚ö†Ô∏è MONGODB_URI kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh, s·ª≠ d·ª•ng URI m·∫∑c ƒë·ªãnh');
        }
        
        // Options k·∫øt n·ªëi
        const options = {
            useNewUrlParser: true,
            useUnifiedTopology: true,
            serverSelectionTimeoutMS: 5000,
            socketTimeoutMS: 45000,
            family: 4,
            maxPoolSize: 50,
            minPoolSize: 10,
            maxIdleTimeMS: 10000,
            appName: "HoVietQuy"
        };

        const conn = await mongoose.connect(
            process.env.MONGODB_URI || 'mongodb://localhost:27017/tourist-travel',
            options
        );
        
        console.log(`‚úÖ MongoDB Connected: ${conn.connection.host}`);
        
        // X·ª≠ l√Ω c√°c s·ª± ki·ªán k·∫øt n·ªëi
        mongoose.connection.on('connected', () => {
            console.log('üü¢ Mongoose connected to MongoDB');
        });

        mongoose.connection.on('error', (err) => {
            console.error('üî¥ Mongoose connection error:', err);
            // Th·ª≠ k·∫øt n·ªëi l·∫°i n·∫øu l·ªói
            if (retryCount < 3) {
                console.log(`üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i (l·∫ßn ${retryCount + 1}/3)...`);
                setTimeout(() => connectDB(retryCount + 1), 5000);
            } else {
                console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MongoDB sau 3 l·∫ßn th·ª≠');
                process.exit(1);
            }
        });

        mongoose.connection.on('disconnected', () => {
            console.log('üü° Mongoose disconnected');
            // Th·ª≠ k·∫øt n·ªëi l·∫°i khi b·ªã ng·∫Øt k·∫øt n·ªëi
            if (retryCount < 3) {
                console.log(`üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i (l·∫ßn ${retryCount + 1}/3)...`);
                setTimeout(() => connectDB(retryCount + 1), 5000);
            }
        });

        // X·ª≠ l√Ω t·∫Øt ·ª©ng d·ª•ng
        process.on('SIGINT', async () => {
            try {
                await mongoose.connection.close();
                console.log('üîå Mongoose connection closed through app termination');
                process.exit(0);
            } catch (err) {
                console.error('‚ùå Error closing Mongoose connection:', err);
                process.exit(1);
            }
        });

    } catch (error) {
        console.error('‚ùå MongoDB connection error:', error);
        // Th·ª≠ k·∫øt n·ªëi l·∫°i n·∫øu l·ªói
        if (retryCount < 3) {
            console.log(`üîÑ ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i (l·∫ßn ${retryCount + 1}/3)...`);
            setTimeout(() => connectDB(retryCount + 1), 5000);
        } else {
            console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn MongoDB sau 3 l·∫ßn th·ª≠');
            process.exit(1);
        }
    }
};

module.exports = connectDB; 